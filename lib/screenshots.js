// Generated by CoffeeScript 1.7.1
(function() {
  var browserName, disableScreenshots, fs, getPath, mkdirp, resemble, rimraf, screenshotBase, screenshotMatchers, slug;

  fs = require('fs');

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  slug = require('slug');

  resemble = require('resemble').resemble;

  browserName = '';

  browser.getCapabilities().then(function(capabilities) {
    return browserName = capabilities.caps_.browserName.toLowerCase();
  });

  disableScreenshots = browser.params['disable-screenshots'];

  screenshotBase = browser.params['screenshots-base-path'] || '';

  getPath = function(suiteName) {
    return screenshotBase + '/' + slug(suiteName) + '/' + browserName;
  };

  screenshotMatchers = {
    toMatchScreenshots: function(name) {
      var allMatch, failures, matchScreenshot, me, path;
      if (disableScreenshots) {
        return true;
      }
      me = this;
      path = getPath(me.spec.suite.description);
      matchScreenshot = function(screenshot) {
        var e, expectedData, filename, matches, originalData;
        matches = false;
        filename = "" + (slug(me.spec.description + " " + name)) + "-" + screenshot.label + "-" + screenshot.width + "x" + screenshot.height + ".png";
        try {
          matches = screenshot.data === fs.readFileSync(path + '/' + filename).toString('base64');
        } catch (_error) {
          e = _error;
          '';
        }
        if (!matches) {
          mkdirp.sync(path + '/failed');
          fs.writeFileSync(path + '/failed/' + filename, screenshot.data, {
            encoding: 'base64'
          });
          try {
            mkdirp.sync(path + '/diff');
            originalData = new Buffer(screenshot.data, 'base64');
            expectedData = fs.readFileSync(path + '/' + filename);
            resemble(originalData).compareTo(expectedData).onComplete(function(out) {
              var output;
              output = out.getImageDataUrl().substr(22);
              return fs.writeFileSync(path + '/diff/' + filename + '-diff.png', output, {
                encoding: 'base64'
              });
            });
          } catch (_error) {
            e = _error;
            '';
          }
        }
        return matches;
      };
      if (!me.actualOriginal) {
        me.actualOriginal = me.actual;
      }
      allMatch = true;
      failures = [];
      me.actualOriginal.forEach(function(screenshot) {
        var matches;
        matches = matchScreenshot(screenshot);
        if (!matches) {
          failures.push("" + screenshot.label + "-" + screenshot.width + "x" + screenshot.height);
        }
        return allMatch = allMatch && matches;
      });
      me.actual = '<screenshots>';
      me.message = function(name) {
        return "screenshots [" + (failures.join(", ")) + "] for " + name + " did not match";
      };
      return allMatch;
    }
  };

  exports.sizes = [
    {
      label: 'desktop',
      width: 1280,
      height: 1000
    }, {
      label: 'ipad-landscape',
      width: 1024,
      height: 1000
    }, {
      label: 'ipad-portrait',
      width: 768,
      height: 1000
    }, {
      label: 'iphone-landscape',
      width: 480,
      height: 1000
    }, {
      label: 'iphone-portrait',
      width: 320,
      height: 1000
    }
  ];


  /*
  Public API
   */

  exports.initializeSuite = function(suite) {
    var path;
    path = getPath(suite.description);
    rimraf.sync(path + '/failed');
    rimraf.sync(path + '/diff');
    return beforeEach(function() {
      return this.addMatchers(screenshotMatchers);
    });
  };

  exports.takeScreenshots = function() {
    var screenshots, setScreenSize, sizes, takeNextShot;
    if (disableScreenshots) {
      return '';
    }
    setScreenSize = function(width, height) {
      return browser.driver.manage().window().setSize(width, height);
    };
    screenshots = [];
    sizes = [].concat(exports.sizes);
    takeNextShot = function() {
      var size;
      if (sizes.length > 0) {
        size = sizes.shift();
        return setScreenSize(size.width, size.height).then(function() {
          return browser.takeScreenshot();
        }).then(function(screenshot) {
          screenshots.push({
            label: size.label,
            width: size.width,
            height: size.height,
            data: screenshot
          });
          return takeNextShot();
        });
      } else {
        return screenshots;
      }
    };
    return takeNextShot();
  };

}).call(this);
