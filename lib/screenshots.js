// Generated by CoffeeScript 1.7.1
(function() {
  var Q, browserName, disableScreenshots, fs, getPath, matchScreenshot, mkdirp, resemble, rimraf, saveFailureImages, screenshotBase, slug, takeScreenshots;

  fs = require('fs');

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  slug = require('slug');

  resemble = require('resemble').resemble;

  Q = require('q');

  browserName = '';

  browser.getCapabilities().then(function(capabilities) {
    return browserName = capabilities.caps_.browserName.toLowerCase();
  });

  disableScreenshots = browser.params['disable-screenshots'];

  screenshotBase = browser.params['screenshots-base-path'] || '.';

  getPath = function(suite) {
    var buildName;
    buildName = function(suite) {
      var prefix;
      prefix = '';
      if (suite.parentSuite) {
        prefix = "" + (buildName(suite.parentSuite)) + " ";
      }
      return "" + prefix + suite.description;
    };
    return screenshotBase + '/' + slug(buildName(suite)) + '/' + browserName;
  };

  matchScreenshot = function(spec, screenshotName, screenshot) {
    var filename, label, path;
    path = getPath(spec.suite);
    label = "" + screenshotName + " - " + screenshot.label + "-" + screenshot.width + "x" + screenshot.height;
    filename = "" + (slug(spec.description + " " + screenshotName)) + "-" + screenshot.label + "-" + screenshot.width + "x" + screenshot.height + ".png";
    return Q.fcall(function() {
      if (!spec.suite._screenshotsInitialized) {
        return Q.all([Q.nfcall(rimraf, path + '/missing'), Q.nfcall(rimraf, path + '/failed'), Q.nfcall(rimraf, path + '/diff')]);
      } else {
        return true;
      }
    }).then(function() {
      spec.suite._screenshotsInitialized = true;
      return Q.nfcall(fs.readFile, path + '/' + filename);
    }).then(function(data) {
      var deferred;
      if (screenshot.data === data.toString('base64')) {
        return {
          match: true
        };
      }
      deferred = Q.defer();
      resemble(new Buffer(screenshot.data, 'base64')).compareTo(data).onComplete(function(result) {
        if (result.misMatchPercentage === '0.00') {
          return deferred.resolve({
            match: true
          });
        } else {
          return deferred.resolve({
            match: false,
            label: label,
            path: path,
            filename: filename,
            actual: screenshot.data,
            difference: result.getImageDataUrl().substr(22),
            reason: "differed by " + result.misMatchPercentage + "%"
          });
        }
      });
      return deferred.promise;
    }, function(error) {
      if (error) {
        return Q({
          label: label,
          path: path,
          filename: filename,
          actual: screenshot.data,
          match: false,
          missing: true,
          reason: 'missing'
        });
      }
    }).then(function(result) {
      if (!result.match) {
        saveFailureImages(result);
      }
      return expect(result.match).toBe(true, "" + result.label + ": " + result.reason);
    });
  };

  saveFailureImages = function(result) {
    var writeImage;
    writeImage = function(path, data) {
      return Q.nfcall(mkdirp, path).then(function() {
        return Q.nfcall(fs.writeFile, "" + path + "/" + result.filename, data, {
          encoding: 'base64'
        });
      });
    };
    if (result.missing) {
      return Q.all([writeImage("" + result.path + "/missing", result.actual)]);
    } else {
      return Q.all([writeImage("" + result.path + "/failed", result.actual), writeImage("" + result.path + "/diff", result.difference)]);
    }
  };

  takeScreenshots = function(spec, screenshotName) {
    var matchingPromises, setScreenSize, shotsTakenPromise;
    setScreenSize = function(width, height) {
      return browser.driver.manage().window().setSize(width, height);
    };
    matchingPromises = [];
    shotsTakenPromise = exports.sizes.reduce(function(soFar, size) {
      return soFar.then(setScreenSize(size.width, size.height).then(function() {
        return browser.takeScreenshot();
      }).then(function(screenshot) {
        matchingPromises.push(matchScreenshot(spec, screenshotName, {
          label: size.label,
          width: size.width,
          height: size.height,
          data: screenshot
        }));
        return true;
      }));
    }, Q(true));
    return shotsTakenPromise.then(function() {
      return Q.all(matchingPromises);
    });
  };

  exports.sizes = [
    {
      label: 'desktop',
      width: 1280,
      height: 1000
    }, {
      label: 'ipad-landscape',
      width: 1024,
      height: 1000
    }, {
      label: 'ipad-portrait',
      width: 768,
      height: 1000
    }, {
      label: 'iphone-landscape',
      width: 480,
      height: 1000
    }, {
      label: 'iphone-portrait',
      width: 320,
      height: 1000
    }
  ];


  /*
  Public API
   */

  exports.checkScreenshots = function(spec, screenshotName) {
    if (disableScreenshots) {
      return;
    }
    return takeScreenshots(spec, screenshotName);
  };

}).call(this);
